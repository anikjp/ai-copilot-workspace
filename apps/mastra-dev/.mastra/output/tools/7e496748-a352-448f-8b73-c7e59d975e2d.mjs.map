{"version":3,"file":"7e496748-a352-448f-8b73-c7e59d975e2d.mjs","sources":["../../../src/mastra/tools/index.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { generateText } from \"ai\";\n\nimport { z } from \"zod\";\nimport { text } from \"stream/consumers\";\nconst images = [\"Bonsai_Tree_Potted_Japanese_Art_Green_Foliage.jpeg\", \"Cherry_Blossoms_Sakura_Night_View_City_Lights_Japan.jpg\", \"Ginkaku-ji_Silver_Pavilion_Kyoto_Japanese_Garden_Pond_Reflection.jpg\", \"Itsukushima_Shrine_Miyajima_Floating_Torii_Gate_Sunset_Long_Exposure.jpg\", \"Mount_Fuji_Lake_Reflection_Cherry_Blossoms_Sakura_Spring.jpg\", \"Osaka_Castle_Turret_Stone_Wall_Pine_Trees_Daytime.jpg\", \"Senso-ji_Temple_Asakusa_Cherry_Blossoms_Kimono_Umbrella.jpg\", \"Shirakawa-go_Gassho-zukuri_Thatched_Roof_Village_Aerial_View.jpg\", \"Takachiho_Gorge_Waterfall_River_Lush_Greenery_Japan.jpg\", \"Tokyo_Skyline_Night_Tokyo_Tower_Mount_Fuji_View.jpg\"]\n// Define the handler for the weather tool\nconst getHaiku = async (topic: string) => {\n  // Replace with an actual API call to a weather service\n  const haikuFormat = { japanese: [\"仮の句よ\", \"まっさらながら\", \"花を呼ぶ\"], english: [\"A placeholder verse—\", \"even in a blank canvas,\", \"it beckons flowers.\"], image_names: [\"image1.jpg\", \"image2.jpg\", \"image3.jpg\"] }\n  const LLM = openai(\"chatgpt-4o-latest\")\n  const response = await generateText({\n    model: LLM,\n    prompt: `Create a haiku about ${topic}. The format should strictly be like like this:\n    ${haikuFormat}\n    `,\n  })\n  console.log(response)\n  // completions.create({\n  //   model: \"gpt-4o\",\n  //   messages: [{ role: \"user\", content: `Create a haiku about ${topic}` }],\n  // });\n  console.log(`Fetching haiku for ${topic}...`);\n  // Example data structure\n  return { japanese: [\"仮の句よ\", \"まっさらながら\", \"花を呼ぶ\"], english: [\"A placeholder verse—\", \"even in a blank canvas,\", \"it beckons flowers.\"], image_names: [\"image1.jpg\", \"image2.jpg\", \"image3.jpg\"] };\n};\n\n// Define a tool for retrieving weather information\nexport const haikuTopicTool = createTool({\n  id: \"haikuTopicTool\",\n  description: `Extract the Haiku topic from the user's message`,\n  inputSchema: z.object({\n    topic: z.string(),\n  }),\n  outputSchema: z.string(),\n  execute: async ({ context: { topic } }) => {\n    console.log(\"Using tool to create a haiku about\", topic);\n    return topic;\n  },\n});\n\n// z.object({\n//   japanese: z.array(z.string()),\n//   english: z.array(z.string()),\n//   image_names: z.array(z.string()),\n// }),\n\nexport const haikuGenerateTool = createTool({\n  id: \"haikuGenerateTool\",\n  description: `Generate a haiku about a given topic. Always generate 3 images for the haiku. \n    While generating images, use only this list of images provided : ${images}`,\n  inputSchema: z.object({\n    japanese: z.array(z.string()),\n    english: z.array(z.string()),\n    image_names: z.array(z.string()),\n  }),\n  outputSchema: z.object({\n    japanese: z.array(z.string()),\n    english: z.array(z.string()),\n    image_names: z.array(z.string()),\n  }),\n  execute: async ({ context: { japanese, english, image_names } }) => {\n    console.log(\"Using tool to create a haiku about\", japanese, english, image_names);\n    return { japanese, english, image_names };\n  },\n});"],"names":[],"mappings":";;;AAMA,MAAM,MAAA,GAAS,CAAC,oDAAA,EAAsD,yDAAA,EAA2D,sEAAA,EAAwE,0EAAA,EAA4E,8DAAA,EAAgE,uDAAA,EAAyD,6DAAA,EAA+D,kEAAA,EAAoE,yDAAA,EAA2D,qDAAqD,CAAA;AAuB1nB,MAAM,iBAAiB,UAAA,CAAW;AAAA,EACvC,EAAA,EAAI,gBAAA;AAAA,EACJ,WAAA,EAAa,CAAA,+CAAA,CAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,KAAA,EAAO,EAAE,MAAA;AAAO,GACjB,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,EACvB,SAAS,OAAO,EAAE,SAAS,EAAE,KAAA,IAAQ,KAAM;AACzC,IAAA,OAAA,CAAQ,GAAA,CAAI,sCAAsC,KAAK,CAAA;AACvD,IAAA,OAAO,KAAA;AAAA,EACT;AACF,CAAC;AAQM,MAAM,oBAAoB,UAAA,CAAW;AAAA,EAC1C,EAAA,EAAI,mBAAA;AAAA,EACJ,WAAA,EAAa,CAAA;AAAA,qEAAA,EACwD,MAAM,CAAA,CAAA;AAAA,EAC3E,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC5B,OAAA,EAAS,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC3B,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ;AAAA,GAChC,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC5B,OAAA,EAAS,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC3B,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ;AAAA,GAChC,CAAA;AAAA,EACD,OAAA,EAAS,OAAO,EAAE,OAAA,EAAS,EAAE,QAAA,EAAU,OAAA,EAAS,WAAA,EAAY,EAAE,KAAM;AAClE,IAAA,OAAA,CAAQ,GAAA,CAAI,oCAAA,EAAsC,QAAA,EAAU,OAAA,EAAS,WAAW,CAAA;AAChF,IAAA,OAAO,EAAE,QAAA,EAAU,OAAA,EAAS,WAAA,EAAY;AAAA,EAC1C;AACF,CAAC;;;;"}