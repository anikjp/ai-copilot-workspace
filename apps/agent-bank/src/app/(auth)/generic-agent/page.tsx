"use client"

import { useCoAgent, useCopilotAction, useCopilotReadable } from "@copilotkit/react-core"
import { useCopilotChatSuggestions } from "@copilotkit/react-ui"
import { Brain, Code, FileText, FolderOpen } from "lucide-react"
import { useState } from "react"

export interface WorkspaceFile {
  name: string
  path: string
  size: number
  type: string
  createdAt: string
}

export interface GenericAgentState {
  currentFiles: WorkspaceFile[]
  workspaceId: string | null
  userId: string
  selectedModel: string
  conversationHistory: any[]
}

export default function GenericAgentPage() {
  const [workspaceFiles, setWorkspaceFiles] = useState<WorkspaceFile[]>([])
  const [workspaceId, setWorkspaceId] = useState<string | null>(null)
  const [userId, setUserId] = useState("demo_user")
  const [selectedModel, setSelectedModel] = useState("gpt-4.1-mini")

  const { state, setState } = useCoAgent({
    name: "genericAgent",
    initialState: {
      workspace_files: [],
      workspace_id: null,
      user_id: userId,
      selected_model: selectedModel
    }
  })

  // Render workspace files
  useCopilotAction({
    name: "render_workspace_files",
    description: "Display the current workspace files uploaded by the user or created by the agent",
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <>
          {args?.files && (
            <>
              <div className="flex flex-col gap-4 p-4 bg-white rounded-lg border">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                  <FolderOpen className="w-5 h-5 text-blue-600" />
                  Workspace Files
                </h3>
                
                <div className="space-y-2">
                  {args.files.map((file: WorkspaceFile, index: number) => (
                    <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <FileText className="w-5 h-5 text-gray-600" />
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-800">{file.name}</p>
                        <p className="text-xs text-gray-500">
                          {(file.size / 1024).toFixed(2)} KB â€¢ {new Date(file.createdAt).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <button 
                hidden={status == "complete"}
                className="mt-4 rounded-full px-6 py-2 bg-blue-50 text-blue-700 border border-blue-200 shadow-sm hover:bg-blue-100 transition-colors font-semibold text-sm"
                onClick={() => {
                  if (respond) {
                    setWorkspaceFiles(args.files)
                    respond("Workspace files loaded successfully. You can now ask me to analyze or process them.")
                  }
                }}
              >
                Continue
              </button>
            </>
          )}
        </>
      )
    }
  })

  // Render analysis results
  useCopilotAction({
    name: "render_analysis",
    description: "Display analysis results from the generic agent",
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <>
          {args?.analysis && (
            <>
              <div className="flex flex-col gap-4 p-4 bg-white rounded-lg border">
                <h3 className="text-lg font-semibold text-gray-800">Analysis Results</h3>
                
                <div className="prose prose-sm max-w-none">
                  <pre className="bg-gray-50 p-4 rounded-lg overflow-x-auto">
                    {JSON.stringify(args.analysis, null, 2)}
                  </pre>
                </div>
              </div>

              <button 
                hidden={status == "complete"}
                className="mt-4 rounded-full px-6 py-2 bg-green-50 text-green-700 border border-green-200 shadow-sm hover:bg-green-100 transition-colors font-semibold text-sm"
                onClick={() => {
                  if (respond) {
                    respond("Analysis accepted. What would you like to do next?")
                  }
                }}
              >
                Accept Analysis
              </button>
            </>
          )}
        </>
      )
    }
  })

  // Render generated files
  useCopilotAction({
    name: "render_generated_files",
    description: "Display files generated by the agent",
    renderAndWaitForResponse: ({ args, respond, status }) => {
      return (
        <>
          {args?.generated_files && (
            <>
              <div className="flex flex-col gap-4 p-4 bg-white rounded-lg border">
                <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
                  <Code className="w-5 h-5 text-green-600" />
                  Generated Files
                </h3>
                
                <div className="space-y-2">
                  {args.generated_files.map((file: any, index: number) => (
                    <div key={index} className="flex items-center gap-3 p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors">
                      <FileText className="w-5 h-5 text-green-600" />
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-800">{file.name}</p>
                        <p className="text-xs text-gray-500">{file.description || "Generated by agent"}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <button 
                hidden={status == "complete"}
                className="mt-4 rounded-full px-6 py-2 bg-green-50 text-green-700 border border-green-200 shadow-sm hover:bg-green-100 transition-colors font-semibold text-sm"
                onClick={() => {
                  if (respond) {
                    respond("Files generated successfully. What would you like to do next?")
                  }
                }}
              >
                Continue
              </button>
            </>
          )}
        </>
      )
    }
  })

  useCopilotReadable({
    description: "Current workspace state for the generic agent",
    value: JSON.stringify({
      files: workspaceFiles,
      workspace_id: workspaceId,
      user_id: userId,
      selected_model: selectedModel
    })
  })

  useCopilotChatSuggestions({
    available: "enabled",
    instructions: "You are a helpful Generic AI Agent. You can help users analyze data, generate content, solve problems, and manage their workspace files. Suggest actions like: 'Analyze the uploaded CSV file', 'Generate a Python script for data processing', 'Summarize the document', or 'Create a markdown report'.",
  })

  return (
    <div className="h-full w-full p-6 bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex items-center gap-4 mb-6">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
              <span className="text-2xl">ðŸ¤–</span>
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Generic Agent Dashboard</h1>
              <p className="text-sm text-gray-500">Workspace ID: {workspaceId || "Not set"} â€¢ User: {userId}</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-blue-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <FolderOpen className="w-5 h-5 text-blue-600" />
                <h3 className="font-semibold text-gray-900">Files</h3>
              </div>
              <p className="text-2xl font-bold text-blue-600">{workspaceFiles.length}</p>
              <p className="text-xs text-gray-600">Files in workspace</p>
            </div>

            <div className="bg-purple-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Brain className="w-5 h-5 text-purple-600" />
                <h3 className="font-semibold text-gray-900">Model</h3>
              </div>
              <p className="text-sm font-bold text-purple-600">{selectedModel}</p>
              <p className="text-xs text-gray-600">Selected AI model</p>
            </div>

            <div className="bg-green-50 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <FileText className="w-5 h-5 text-green-600" />
                <h3 className="font-semibold text-gray-900">Workspace</h3>
              </div>
              <p className="text-sm font-bold text-green-600">{workspaceId ? "Active" : "Not set"}</p>
              <p className="text-xs text-gray-600">Workspace status</p>
            </div>
          </div>

          {workspaceFiles.length > 0 && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h3 className="font-semibold text-gray-900 mb-3">Recent Files</h3>
              <div className="space-y-2">
                {workspaceFiles.slice(0, 5).map((file, index) => (
                  <div key={index} className="flex items-center gap-3 p-2 bg-white rounded hover:bg-gray-100 transition-colors">
                    <FileText className="w-4 h-4 text-gray-600" />
                    <span className="text-sm text-gray-800">{file.name}</span>
                    <span className="text-xs text-gray-500 ml-auto">{(file.size / 1024).toFixed(2)} KB</span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
